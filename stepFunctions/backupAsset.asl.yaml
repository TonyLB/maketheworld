---
Comment: Command step-function to execute backup of an Asset
StartAt: Define Defaults
States:
    "Define Defaults":
        Type: Pass
        Next: Apply Defaults
        ResultPath: "$.inputDefaults"
        Parameters:
            connectionId: ""
            requestId: ""
            archive: false
    "Apply Defaults":
        Type: Pass
        Next: Assign Backup Entry
        ResultPath: "$"
        Parameters:
            "args.$": "States.JsonMerge($.inputDefaults, $$.Execution.Input, false)"
    "Assign Backup Entry":
        Type: Task
        Next: Check Address
        Resource: "${AssetsFunctionArn}"
        Parameters:
            "message": "createBackupEntry"
            "AssetId.$": "$.args.assetId"
        ResultPath: "$.results"
        Retry:
            -
                ErrorEquals:
                    - States.TaskFailed
                IntervalSeconds: 2
                MaxAttempts: 3
                BackoffRate: 1
        Catch:
            -
                ErrorEquals:
                    - States.ALL
                Next: Notify of Failure
    "Check Address":
        Type: Choice
        Choices:
            -
                Variable: "$.results.suffix"
                IsPresent: false
                Next: Notify of Failure
            -
                Variable: "$.results.fileName"
                IsPresent: false
                Next: Notify of Failure
            -
                Variable: "$.results.address"
                IsPresent: false
                Next: Notify of Failure
        Default: Backup WML
    "Backup WML":
        Type: Task
        Next: Maybe Archive
        Resource: "${WMLFunctionArn}"
        Parameters:
            "message": "backupWML"
            "from.$": "$.results.address"
            "to.$": "$.results.fileName"
        ResultPath: "$.backupResults"
        Retry:
            -
                ErrorEquals:
                    - States.TaskFailed
                IntervalSeconds: 2
                MaxAttempts: 2
                BackoffRate: 1
        Catch:
            -
                ErrorEquals:
                    - States.ALL
                Next: Notify of Failure
    "Maybe Archive":
        Type: Choice
        Choices:
            -
                Variable: "$.args.archive"
                BooleanEquals: true
                Next: Archive Asset
        Default: Done
    "Archive Asset":
        Type: Task
        Next: Done
        Resource: "${AssetsFunctionArn}"
        Parameters:
            "message": "moveAsset"
            "zone": "Archive"
            "AssetId.$": "$.args.assetId"
        ResultPath: "$.moveResults"
        Catch:
            -
                ErrorEquals:
                    - States.ALL
                Next: Notify of Failure
    "Notify of Failure":
        Type: Task
        Next: Failure
        Resource: "arn:aws:states:::sns:publish"
        Parameters:
            TopicArn: "${TopicArn}"
            Message: "{}"
            MessageAttributes:
                Type:
                    DataType: String
                    StringValue: Error
                RequestId:
                    DataType: String
                    "StringValue.$": "$.args.requestId"
                ConnectionIds:
                    DataType: String.Array
                    "StringValue.$": "States.JsonToString(States.Array($.args.connectionId))"
                Error:
                    DataType: String
                    StringValue: "Error while caching assets"
    Failure:
        Type: Fail
    Done:
        Type: Succeed
