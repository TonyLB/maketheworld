AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  mtw-app

  SAM Template for Make The World, a serverless multiplayer text roleplaying system,
  with DynamoDB storage, React front-end and administrative tools.

Globals:
  Function:
    Environment:
      Variables:
        NODE_OPTIONS: '--enable-source-maps'
Parameters:
  TablePrefix:
    Type: String
    Default: 'mtw'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  #
  # CognitoCallbackURL may be a useless parameter:  Worth reinvestigating the lifecycle of token assignment, and whether
  # the '.aud' comparison is providing any added security.
  #
  CognitoCallbackURL:
    Type: String
    Default: 'http://localhost:3000'
    Description: (Required) The URL that Cognito should return control to, after authorizing a user.


Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    UpdateReplacePolicy: Retain
    Properties:
      UserPoolName: !Sub ${TablePrefix}-user-UserPool
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      EmailVerificationSubject: Welcome to Make The World
      EmailVerificationMessage: >
          Thank you for signing up for Make The World.  Here is your verification code (the system will ask for it): {####}
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: false
          RequireUppercase: false
          RequireNumbers: false
          RequireSymbols: false
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${TablePrefix}-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      CallbackURLs:
        - !Ref CognitoCallbackURL

  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub ${TablePrefix}-bus
  RealTimeWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MTWRealTimeSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.service"
  AuthenticationPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      AuthenticationFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthenticationFunction
      Principal: apigateway.amazonaws.com
  AuthenticationFunction:
      Type: AWS::Serverless::Function
      # Metadata:
      #   BuildMethod: esbuild
      #   BuildProperties:
      #     Minify: true
      #     Target: "es2020"
      #     Sourcemap: true
      #     EntryPoints: 
      #       - app.ts
      Properties:
          CodeUri: lambda/authentication/build/
          Handler: lambda.handler
          MemorySize: 512
          Runtime: nodejs18.x
          Timeout: 5
          Environment:
              Variables:
                  TABLE_PREFIX: !Ref TablePrefix
                  COGNITO_POOL_ID: !Ref UserPool
                  COGNITO_USER_POOL_CLIENT: !Ref UserPoolClient
                  COGNITO_KEYS_URL:
                    Fn::Sub:
                      - "https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}/.well-known/jwks.json"
                      -
                          Region: !Ref AWS::Region
                          CognitoUserPool: !Ref UserPool
                  EVENT_BUS_NAME: !Sub '${TablePrefix}-bus'
          Policies:
            - DynamoDBCrudPolicy:
                TableName: !Sub '${TablePrefix}_connections'
            - Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - events:PutEvents  
  EphemeraPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      EphemeraFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EphemeraFunction
      Principal: apigateway.amazonaws.com
  AssetPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - AssetsFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AssetsFunction
      Principal: apigateway.amazonaws.com
  EphemeraFunction:
    Type: AWS::Serverless::Function
    # Metadata:
    #   BuildMethod: esbuild
    #   BuildProperties:
    #     Minify: true
    #     Target: "es2020"
    #     Sourcemap: true
    #     EntryPoints: 
    #       - app.ts
    Properties:
      Tracing: Active
      CodeUri: lambda/ephemera/build/
      Handler: lambda.handler
      MemorySize: 512
      Runtime: nodejs18.x
      Timeout: 20
      Environment:
        Variables:
          TABLE_PREFIX: !Ref TablePrefix
          WEBSOCKET_API: !Join [ '', [ 'https://', !Ref RealTimeWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/', 'Prod'] ]
          S3_BUCKET: !Sub '${TablePrefix}-assets'
          COGNITO_USER_POOL_CLIENT: !Ref UserPoolClient
          COGNITO_KEYS_URL:
            Fn::Sub:
              - "https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}/.well-known/jwks.json"
              -
                  Region: !Ref AWS::Region
                  CognitoUserPool: !Ref UserPool
          EVENT_BUS_NAME: !Sub '${TablePrefix}-bus'
          SYNC_MESSAGE_SFN: !Ref MessageSyncStateMachine
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub '${TablePrefix}_ephemera'
        - DynamoDBCrudPolicy:
            TableName: !Sub '${TablePrefix}_connections'
        - DynamoDBCrudPolicy:
            TableName: !Sub '${TablePrefix}_message_delta'
        - Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              - events:PutEvents
        - StepFunctionsExecutionPolicy:
            StateMachineName: !Sub '${TablePrefix}_message_sync_step_function'
        - Statement:
          - Effect: Allow
            Action: execute-api:ManageConnections
            Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:**/@connections/*'
        - Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              Fn::Sub:
                  - "arn:aws:s3:::${AssetBucket}/*"
                  - AssetBucket: !Sub '${TablePrefix}-assets'
      Events:
        Coordination:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Sub ${TablePrefix}-bus
            Pattern:
              source:
                - mtw.coordination
              detail-type:
                - Canonize Asset
                - Decanonize Asset
                - Set Canon Assets
        Development:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Sub ${TablePrefix}-bus
            Pattern:
              source:
                - mtw.development
              detail-type:
                - Calculate Cascade
                - Execute Action
                - Publish Notification
                - Update Notification
        Diagnostics:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Sub ${TablePrefix}-bus
            Pattern:
              source:
                - mtw.diagnostics
              detail-type:
                - Force Disconnect
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RealTimeWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
          Fn::Sub:
              - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${ChannelArn}/invocations"
              -
                  Region: !Ref AWS::Region
                  ChannelArn: !GetAtt EphemeraFunction.Arn
      RequestTemplates:
        application/json: >
          {
            "action": "disconnect"
          }
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
      #
      # $connect is the only WebSocket action that can take a query parameter:  We pass a JWT token
      # from Cognito to authenticate
      #
      RequestParameters:
          route.request.querystring.Authorization:
            Required: false
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RealTimeWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
          Fn::Sub:
              - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${ChannelArn}/invocations"
              -
                  Region: !Ref AWS::Region
                  ChannelArn: !GetAtt AuthenticationFunction.Arn
      RequestTemplates:
        application/json: >
          {
            "action": "connect"
          }
  PingRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteKey: ping
      AuthorizationType: NONE
      OperationName: PingRoute
      RouteResponseSelectionExpression: "$default"
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref PingInteg
  PingInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RealTimeWebSocket
      Description: Ping Integration
      IntegrationType: MOCK
      PassthroughBehavior: WHEN_NO_MATCH
      TemplateSelectionExpression: "application/json"
      RequestTemplates:
        application/json: >
          {
            "statusCode": 200
          }
  PingIntegrationResponse:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties:
      ApiId: !Ref RealTimeWebSocket
      IntegrationId: !Ref PingInteg
      TemplateSelectionExpression: "$integration.response.statuscode"
      IntegrationResponseKey: "/200/"
      ResponseTemplates:
        "200": >
          {
            "statusCode": 200,
            "type": "pong"
          }
  PingResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteId: !Ref PingRoute
      RouteResponseKey: "$default"
  #
  # The Route defines the mapping from a key to a particular integration.  In this case, the $default
  # key catches everything not specified explicitly
  #
  EphemeraRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteKey: ephemera
      AuthorizationType: NONE
      OperationName: EphemeraRoute
      RouteResponseSelectionExpression: $default
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref EphemeraInteg
  #
  # The integration connects the incoming message with a specific target.  In this case, we use
  # a direct AWS-PROXY to integrate with our lambda invocation, passing the incoming message
  # unchanged.
  #
  EphemeraInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RealTimeWebSocket
      Description: Ephemera Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
          Fn::Sub:
              - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${ChannelArn}/invocations"
              -
                  Region: !Ref AWS::Region
                  ChannelArn: !GetAtt EphemeraFunction.Arn
  #
  # According to documentation, an IntegrationResponse shouldn't be necessary, but whenever
  # I don't include it, messaging goes wonky.  Maybe it's superstition at this point, but I'm
  # leaving it in.
  #
  EphemeraIntegrationResponse:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties:
      ApiId: !Ref RealTimeWebSocket
      IntegrationId: !Ref EphemeraInteg
      IntegrationResponseKey: "/200/"
  #
  # A Response tells the Websocket to return the return-value of the NodeJS handler function as
  # a websocket message in response to the incoming data.  This isn't strictly necessary (we could
  # explicitly invoke the post-to-connection API), but it's convenient.
  #
  EphemeraResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteId: !Ref EphemeraRoute
      RouteResponseKey: "$default"
  #
  # Separate route and integrations for asset service
  #
  AssetRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteKey: asset
      AuthorizationType: NONE
      OperationName: AssetRoute
      RouteResponseSelectionExpression: $default
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref AssetInteg
  AssetInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RealTimeWebSocket
      Description: Asset Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
          Fn::Sub:
              - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${ChannelArn}/invocations"
              -
                  Region: !Ref AWS::Region
                  ChannelArn: !GetAtt AssetsFunction.Arn
  AssetIntegrationResponse:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties:
      ApiId: !Ref RealTimeWebSocket
      IntegrationId: !Ref AssetInteg
      IntegrationResponseKey: "/200/"
  AssetResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteId: !Ref AssetRoute
      RouteResponseKey: "$default"
  RealTimeDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref RealTimeWebSocket
      StageName: Prod
      Description: Prod Deployment
  RealTimeStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      ApiId: !Ref RealTimeWebSocket
      DeploymentId: !Ref RealTimeDeployment
  AssetTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "AssetId"
            AttributeType: "S"
          - AttributeName: "DataCategory"
            AttributeType: "S"
          - AttributeName: "scopedId"
            AttributeType: "S"
          - AttributeName: "player"
            AttributeType: "S"
          - AttributeName: "zone"
            AttributeType: "S"
        BillingMode: "PAY_PER_REQUEST"
        KeySchema:
          - AttributeName: "AssetId"
            KeyType: "HASH"
          - AttributeName: "DataCategory"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: DataCategoryIndex
            KeySchema:
              - AttributeName: DataCategory
                KeyType: HASH
              - AttributeName: AssetId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ScopedIdIndex
            KeySchema:
              - AttributeName: scopedId
                KeyType: HASH
              - AttributeName: DataCategory
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: PlayerIndex
            KeySchema:
              - AttributeName: player
                KeyType: HASH
              - AttributeName: DataCategory
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ZoneIndex
            KeySchema:
              - AttributeName: zone
                KeyType: HASH
              - AttributeName: DataCategory
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        TableName: !Sub '${TablePrefix}_assets'
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
  EphemeraTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "EphemeraId"
            AttributeType: "S"
          - AttributeName: "DataCategory"
            AttributeType: "S"
          - AttributeName: "RoomId"
            AttributeType: "S"
          - AttributeName: "ConnectionId"
            AttributeType: "S"
        BillingMode: "PAY_PER_REQUEST"
        KeySchema:
          - AttributeName: "EphemeraId"
            KeyType: "HASH"
          - AttributeName: "DataCategory"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: DataCategoryIndex
            KeySchema:
              - AttributeName: DataCategory
                KeyType: HASH
              - AttributeName: EphemeraId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: RoomIndex
            KeySchema:
              - AttributeName: RoomId
                KeyType: HASH
              - AttributeName: EphemeraId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ConnectionIndex
            KeySchema:
              - AttributeName: ConnectionId
                KeyType: HASH
              - AttributeName: EphemeraId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        TableName: !Sub '${TablePrefix}_ephemera'
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
  ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "ConnectionId"
            AttributeType: "S"
          - AttributeName: "DataCategory"
            AttributeType: "S"
        BillingMode: "PAY_PER_REQUEST"
        KeySchema:
          - AttributeName: "ConnectionId"
            KeyType: "HASH"
          - AttributeName: "DataCategory"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: DataCategoryIndex
            KeySchema:
              - AttributeName: DataCategory
                KeyType: HASH
              - AttributeName: ConnectionId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        TableName: !Sub '${TablePrefix}_connections'
  MessageDeltaTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "Target"
            AttributeType: "S"
          - AttributeName: "DeltaId"
            AttributeType: "S"
          - AttributeName: "RowId"
            AttributeType: "S"
        BillingMode: "PAY_PER_REQUEST"
        KeySchema:
          - AttributeName: "Target"
            KeyType: "HASH"
          - AttributeName: "DeltaId"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: RowIdIndex
            KeySchema:
              - AttributeName: RowId
                KeyType: HASH
              - AttributeName: Target
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
        TableName: !Sub '${TablePrefix}_message_delta'
  AssetBucket:
      Type: AWS::S3::Bucket
      Properties:
          BucketName: !Sub '${TablePrefix}-assets'
          CorsConfiguration:
            CorsRules:
              -
                AllowedOrigins:
                  - "*"
                AllowedMethods:
                  - POST
                  - GET
                  - PUT
                  - DELETE
                  - HEAD
                AllowedHeaders:
                  - "*"
  ClientBucket:
      Type: AWS::S3::Bucket
      Properties:
          BucketName: !Sub '${TablePrefix}-client'
          CorsConfiguration:
            CorsRules:
              -
                AllowedOrigins:
                  - "*"
                AllowedMethods:
                  - POST
                  - GET
                  - PUT
                  - DELETE
                  - HEAD
                AllowedHeaders:
                  - "*"
  UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
          BucketName: !Sub '${TablePrefix}-uploads'
          CorsConfiguration:
            CorsRules:
              -
                AllowedOrigins:
                  - "*"
                AllowedMethods:
                  - POST
                  - GET
                  - PUT
                  - DELETE
                  - HEAD
                AllowedHeaders:
                  - "*"
  ImageBucket:
      Type: AWS::S3::Bucket
      Properties:
          BucketName: !Sub '${TablePrefix}-images'
          CorsConfiguration:
            CorsRules:
              -
                AllowedOrigins:
                  - "*"
                AllowedMethods:
                  - POST
                  - GET
                  - PUT
                  - DELETE
                  - HEAD
                AllowedHeaders:
                  - "*"
  CloudFrontAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
          CloudFrontOriginAccessIdentityConfig:
              Comment: Cloudfront Origin identity for MakeTheWorld
  RemoveImagesCloudfrontFunction:
      Type: AWS::CloudFront::Function
      Properties:
        AutoPublish: true
        FunctionCode: !Sub |
            function handler(event) {
                var request = event.request;
                var uri = request.uri;

                // Check whether the URI starts with images (it should)
                if (uri.startsWith('/images/')) {
                    request.uri = request.uri.slice(7);
                }
                return request;
            }
        FunctionConfig:
          Comment: !Sub 'Remove images/ from start of URI'
          Runtime: cloudfront-js-1.0
        Name: !Sub "${AWS::StackName}-removeImagesFunction"
  ImageCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
          DistributionConfig:
              Enabled: True
              Origins:
                #
                # TODO: Redirect image origin to ImageBucket and use CloudFront Functions to transform the incoming
                # request to remove the "images/" subdirectory
                #
                #
                # TODO: Refactor CloudFront with Origin Access Control to S3 REST API in order to get static
                # website-serving behavior out of CloudFront
                #
                - DomainName: !GetAtt ImageBucket.RegionalDomainName
                  Id: !Sub "S3-origin-${ImageBucket}"
                  S3OriginConfig:
                      OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontAccessIdentity}"
                - DomainName: !GetAtt ClientBucket.RegionalDomainName
                  Id: !Sub "S3-origin-${ClientBucket}"
                  S3OriginConfig:
                      OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontAccessIdentity}"
              PriceClass: PriceClass_100
              CacheBehaviors:
                - PathPattern: images/*
                  AllowedMethods:
                  - GET
                  - HEAD
                  TargetOriginId: !Sub "S3-origin-${ImageBucket}"
                  ForwardedValues:
                    QueryString: 'false'
                    Cookies:
                      Forward: none
                  ViewerProtocolPolicy: allow-all
                  FunctionAssociations:
                      - EventType: viewer-request
                        FunctionARN: !GetAtt RemoveImagesCloudfrontFunction.FunctionMetadata.FunctionARN
              DefaultCacheBehavior:
                  AllowedMethods:
                  - GET
                  - HEAD
                  TargetOriginId: !Sub "S3-origin-${ClientBucket}"
                  ForwardedValues:
                    QueryString: 'false'
                    Cookies:
                      Forward: none
                  ViewerProtocolPolicy: allow-all
              DefaultRootObject: index.html
              #
              # Since charcoal-client is an SPA, we defer all routing to the root page
              #
              CustomErrorResponses:
                - ErrorCode: '403'
                  ResponseCode: '200'
                  ResponsePagePath: "/index.html"
  ImageHostingPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
          Bucket: !Ref ImageBucket
          PolicyDocument:
            Statement:
              - Action:
                  - "s3:GetObject"
                Effect: Allow
                Principal:
                  AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontAccessIdentity}"
                Resource: !Sub "arn:aws:s3:::${ImageBucket}/*"
            Version: "2012-10-17"
  ClientHostingPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
          Bucket: !Ref ClientBucket
          PolicyDocument:
            Statement:
              - Action:
                  - "s3:GetObject"
                Effect: Allow
                Principal:
                  AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontAccessIdentity}"
                Resource: !Sub "arn:aws:s3:::${ClientBucket}/*"
            Version: "2012-10-17"
  DeployClientSource:
      Type: AWS::Serverless::LayerVersion
      Properties:
          LayerName: deploy-client-source
          Description: Layer providing access to client build
          ContentUri: charcoal-client/build/
          CompatibleRuntimes:
              - nodejs18.x
  MTWFeedbackTopic:
      Type: AWS::SNS::Topic
      Properties:
          TopicName: MTWFeedback
  FeedbackFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: lambda/feedback/build
        Handler: lambda.handler
        MemorySize: 128
        Runtime: nodejs18.x
        Timeout: 2
        Environment:
          Variables:
            WEBSOCKET_API: !Join [ '', [ 'https://', !Ref RealTimeWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/', 'Prod'] ]
            TABLE_PREFIX: !Ref TablePrefix
            EVENT_BUS_NAME: !Sub '${TablePrefix}-bus'
        Policies:
          - Statement:
            - Effect: Allow
              Action: execute-api:ManageConnections
              Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:**/@connections/*'
          - Statement:
            - Effect: Allow
              Resource: '*'
              Action:
                - events:PutEvents
          - DynamoDBReadPolicy:
              TableName: !Sub '${TablePrefix}_connections'
        Events:
          MTWFeedbackSNS:
            Type: SNS
            Properties:
              Topic: !Ref MTWFeedbackTopic
              FilterPolicy:
                  Type:
                      - Success
              FilterPolicyScope: MessageAttributes
  CognitoHandlerFunction:
      Type: AWS::Serverless::Function
      Metadata:
        BuildMethod: esbuild
        BuildProperties:
          Minify: true
          Target: "es2020"
          Sourcemap: true
          EntryPoints: 
            - app.ts
      Properties:
          CodeUri: lambda/cognitoEvent/
          Runtime: nodejs18.x
          Handler: app.handler
          Timeout: 20
          Environment:
              Variables:
                  EVENT_BUS_NAME: !Sub '${TablePrefix}-bus'
          Policies:
            - Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - events:PutEvents
          Events:
            CognitoUserPoolPostConfirm:
              Type: Cognito
              Properties:
                UserPool:
                  Ref: UserPool
                Trigger: PostConfirmation
  InitializeFunction:
      Type: AWS::Serverless::Function
      Metadata:
        BuildMethod: esbuild
        BuildProperties:
          Minify: true
          Target: "es2020"
          Sourcemap: true
          EntryPoints: 
            - app.ts
      Properties:
          CodeUri: lambda/initialize/
          Runtime: nodejs18.x
          Handler: app.handler
          Timeout: 600
          Layers:
              - !Ref DeployClientSource
          Environment:
              Variables:
                  CLIENT_BUCKET: !Sub '${TablePrefix}-client'
                  ASSET_BUCKET: !Sub '${TablePrefix}-assets'
                  USER_POOL_CLIENT: !Ref UserPoolClient
                  USER_POOL_ID: !Ref UserPool
                  WEB_SOCKET_URI: !Join [ '', [ 'wss://', !Ref RealTimeWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'RealTimeStage'] ]
          Policies:
              - S3FullAccessPolicy:
                  BucketName: !Ref ClientBucket
              - S3FullAccessPolicy:
                  BucketName: !Ref AssetBucket
          Events:
            Initialize:
              Type: CloudWatchEvent
              Properties:
                EventBusName: !Sub ${TablePrefix}-bus
                Pattern:
                  source:
                    - mtw.diagnostics
                  detail-type:
                    - Initialize
  #
  # TODO: Iteration 4:  Use the initialize lambda function to back a CustomResource that runs when the Stack
  # is populated.
  #
  AssetsFunction:
      Type: AWS::Serverless::Function
      # Metadata:
      #   BuildMethod: esbuild
      #   BuildProperties:
      #     Minify: true
      #     Target: "es2020"
      #     Sourcemap: true
      #     EntryPoints: 
      #       - app.ts
      Properties:
          CodeUri: lambda/assets/build/
          Handler: lambda.handler
          MemorySize: 1024
          Runtime: nodejs18.x
          Timeout: 30
          Environment:
              Variables:
                  TABLE_PREFIX: !Ref TablePrefix
                  S3_BUCKET: !Sub '${TablePrefix}-assets'
                  UPLOAD_BUCKET: !Sub '${TablePrefix}-uploads'
                  IMAGES_BUCKET: !Sub '${TablePrefix}-images'
                  FEEDBACK_TOPIC: !Ref MTWFeedbackTopic
                  COGNITO_POOL_ID: !Ref UserPool
                  EVENT_BUS_NAME: !Sub '${TablePrefix}-bus'
                  CACHE_ASSETS_SFN: !Ref CacheAssetsStateMachine
                  FETCH_IMPORTS_SFN: !Ref FetchImportsStateMachine
                  HEAL_SFN: !Ref HealStateMachine
          Policies:
            - DynamoDBCrudPolicy:
                TableName: !Sub '${TablePrefix}_assets'
            - DynamoDBCrudPolicy:
                TableName: !Sub '${TablePrefix}_connections'
            - SNSPublishMessagePolicy:
                TopicName: !GetAtt MTWFeedbackTopic.TopicName
            - StepFunctionsExecutionPolicy:
                StateMachineName: !Sub '${TablePrefix}_cache_assets_step_function'
            - StepFunctionsExecutionPolicy:
                StateMachineName: !Sub '${TablePrefix}_parse_wml_step_function'
            - StepFunctionsExecutionPolicy:
                StateMachineName: !Sub '${TablePrefix}_fetch_imports_step_function'
            - StepFunctionsExecutionPolicy:
                StateMachineName: !Sub '${TablePrefix}_heal_step_function'
            - Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - events:PutEvents
            - Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:
                  Fn::Sub:
                      - "arn:aws:s3:::${AssetBucket}/*"
                      - AssetBucket: !Sub '${TablePrefix}-assets'
            - Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:
                  Fn::Sub:
                      - "arn:aws:s3:::${UploadBucket}/*"
                      - AssetBucket: !Sub '${TablePrefix}-uploads'
            - Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  Fn::Sub:
                      - "arn:aws:s3:::${ImageBucket}/*"
                      - AssetBucket: !Sub '${TablePrefix}-images'
            - Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:ListUsers
                Resource:
                  Fn::Sub:
                      - "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}"
                      - UserPoolId: !Ref UserPool
          Events:
            Diagnostics:
              Type: CloudWatchEvent
              Properties:
                EventBusName: !Sub ${TablePrefix}-bus
                Pattern:
                  source:
                    - mtw.diagnostics
                  detail-type:
                    - Heal Global Values
            Coordination:
              Type: CloudWatchEvent
              Properties:
                EventBusName: !Sub ${TablePrefix}-bus
                Pattern:
                  source:
                    - mtw.coordination
                  detail-type:
                    - Remove Asset
                    - Canonize Asset
                    - Decanonize Asset
            MTWFeedbackSNS:
              Type: SNS
              Properties:
                Topic: !Ref MTWFeedbackTopic
                FilterPolicy:
                    Type:
                        - PlayerInfo
                        - LibraryUpdate
                FilterPolicyScope: MessageAttributes
  DeliverMessageSyncFunction:
      Type: AWS::Serverless::Function
      # Metadata:
      #   BuildMethod: esbuild
      #   BuildProperties:
      #     Minify: true
      #     Target: "es2020"
      #     Sourcemap: true
      #     EntryPoints: 
      #       - app.ts
      Properties:
        CodeUri: lambda/deliverMessageSync/build/
        Handler: lambda.handler
        MemorySize: 256
        Runtime: nodejs18.x
        Timeout: 3
        Environment:
          Variables:
            FEEDBACK_TOPIC: !Ref MTWFeedbackTopic
            EVENT_BUS_NAME: !Sub '${TablePrefix}-bus'
        Policies:
          - SNSPublishMessagePolicy:
              TopicName: !GetAtt MTWFeedbackTopic.TopicName
          - Statement:
            - Effect: Allow
              Resource: '*'
              Action:
                - events:PutEvents  
  AddressLookupFunction:
      Type: AWS::Serverless::Function
      Properties:
        Tracing: Active
        CodeUri: lambda/addressLookup/build/
        Handler: lambda.handler
        MemorySize: 256
        Runtime: nodejs18.x
        Timeout: 3
        Environment:
          Variables:
            TABLE_PREFIX: !Ref TablePrefix
            S3_BUCKET: !Sub '${TablePrefix}-assets'
        Policies:
          - DynamoDBReadPolicy:
              TableName: !Sub '${TablePrefix}_assets'
  WMLFunction:
      Type: AWS::Serverless::Function
      Properties:
        Tracing: Active
        CodeUri: lambda/wml/build/
        Handler: lambda.handler
        MemorySize: 512
        Runtime: nodejs18.x
        Timeout: 5
        Environment:
          Variables:
            TABLE_PREFIX: !Ref TablePrefix
            S3_BUCKET: !Sub '${TablePrefix}-assets'
            UPLOAD_BUCKET: !Sub '${TablePrefix}-uploads'
            FEEDBACK_TOPIC: !Ref MTWFeedbackTopic
            IMAGES_BUCKET: !Sub '${TablePrefix}-images'
            EVENT_BUS_NAME: !Sub '${TablePrefix}-bus'
            CACHE_ASSETS_SFN: !Ref CacheAssetsStateMachine
        Policies:
          - DynamoDBCrudPolicy:
              TableName: !Sub '${TablePrefix}_assets'
          - SNSPublishMessagePolicy:
              TopicName: !GetAtt MTWFeedbackTopic.TopicName
          - StepFunctionsExecutionPolicy:
              StateMachineName: !Sub '${TablePrefix}_cache_assets_step_function'
          - Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:DeleteObject
              Resource:
                Fn::Sub:
                    - "arn:aws:s3:::${AssetBucket}/*"
                    - AssetBucket: !Sub '${TablePrefix}-assets'
          - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:DeleteObject
              Resource:
                Fn::Sub:
                    - "arn:aws:s3:::${AssetBucket}/*"
                    - AssetBucket: !Sub '${TablePrefix}-uploads'
          - Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource:
                Fn::Sub:
                    - "arn:aws:s3:::${ImageBucket}/*"
                    - AssetBucket: !Sub '${TablePrefix}-images'
          - Statement:
            - Effect: Allow
              Resource: '*'
              Action:
                - events:PutEvents
  DiagnosticsFunction:
      Type: AWS::Serverless::Function
      Properties:
        Tracing: Active
        CodeUri: lambda/diagnostics/build/
        Handler: lambda.handler
        MemorySize: 512
        Runtime: nodejs18.x
        Timeout: 5
        Environment:
          Variables:
            TABLE_PREFIX: !Ref TablePrefix
        Policies:
          - DynamoDBCrudPolicy:
              TableName: !Sub '${TablePrefix}_assets'
  UpdateEphemeraFunction:
      Type: AWS::Serverless::Function
      Properties:
        Tracing: Active
        CodeUri: lambda/updateEphemera/build/
        Handler: lambda.handler
        MemorySize: 256
        Runtime: nodejs18.x
        Timeout: 5
        Environment:
          Variables:
            TABLE_PREFIX: !Ref TablePrefix
        Policies:
          - DynamoDBCrudPolicy:
              TableName: !Sub '${TablePrefix}_ephemera'
  MessageSyncStateMachineLogs:
    Type: AWS::Logs::LogGroup
  MessageSyncStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub '${TablePrefix}_message_sync_step_function'
      Type: EXPRESS
      DefinitionUri: ./stepFunctions/messageSync.asl.yaml
      Tracing:
        Enabled: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup: 
              LogGroupArn: !GetAtt MessageSyncStateMachineLogs.Arn
        IncludeExecutionData: true
        Level: ALL
      DefinitionSubstitutions:
        MessageDeltaTable: !Sub '${TablePrefix}_message_delta'
        DeliverMessageSyncFunctionArn: !GetAtt DeliverMessageSyncFunction.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref DeliverMessageSyncFunction
        - DynamoDBReadPolicy:
            TableName: !Sub '${TablePrefix}_message_delta'
        - CloudWatchLogsFullAccess
  CacheAssetsStateMachineLogs:
    Type: AWS::Logs::LogGroup
  CacheAssetsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub '${TablePrefix}_cache_assets_step_function'
      Type: EXPRESS
      DefinitionUri: ./stepFunctions/cacheAssets.asl.yaml
      Tracing:
        Enabled: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup: 
              LogGroupArn: !GetAtt CacheAssetsStateMachineLogs.Arn
        IncludeExecutionData: true
        Level: ALL
      DefinitionSubstitutions:
        AddressLookupFunctionArn: !GetAtt AddressLookupFunction.Arn
        EphemeraFunctionArn: !GetAtt EphemeraFunction.Arn
        TopicArn: !GetAtt MTWFeedbackTopic.TopicArn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref AddressLookupFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref EphemeraFunction
        - CloudWatchLogsFullAccess
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt MTWFeedbackTopic.TopicName
  DecacheAssetsStateMachineLogs:
    Type: AWS::Logs::LogGroup
  DecacheAssetsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub '${TablePrefix}_decache_assets_step_function'
      Type: EXPRESS
      DefinitionUri: ./stepFunctions/decacheAssets.asl.yaml
      Tracing:
        Enabled: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup: 
              LogGroupArn: !GetAtt DecacheAssetsStateMachineLogs.Arn
        IncludeExecutionData: true
        Level: ALL
      DefinitionSubstitutions:
        EphemeraFunctionArn: !GetAtt EphemeraFunction.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref EphemeraFunction
        - CloudWatchLogsFullAccess
  HealStateMachineLogs:
    Type: AWS::Logs::LogGroup
  HealStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub '${TablePrefix}_heal_step_function'
      Type: EXPRESS
      DefinitionUri: ./stepFunctions/heal.asl.yaml
      Tracing:
        Enabled: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup: 
              LogGroupArn: !GetAtt HealStateMachineLogs.Arn
        IncludeExecutionData: true
        Level: ALL
      DefinitionSubstitutions:
        DiagnosticsFunctionArn: !GetAtt DiagnosticsFunction.Arn
        UpdateEphemeraFunctionArn: !GetAtt UpdateEphemeraFunction.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref DiagnosticsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref UpdateEphemeraFunction
        - CloudWatchLogsFullAccess
  ParseWMLStateMachineLogs:
    Type: AWS::Logs::LogGroup
  ParseWMLStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub '${TablePrefix}_parse_wml_step_function'
      Type: EXPRESS
      DefinitionUri: ./stepFunctions/parseWML.asl.yaml
      Tracing:
        Enabled: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup: 
              LogGroupArn: !GetAtt ParseWMLStateMachineLogs.Arn
        IncludeExecutionData: true
        Level: ALL
      DefinitionSubstitutions:
        AddressLookupFunctionArn: !GetAtt AddressLookupFunction.Arn
        ParseWMLFunctionArn: !GetAtt WMLFunction.Arn
        HealStepFunctionArn: !GetAtt HealStateMachine.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref AddressLookupFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref WMLFunction
        - StepFunctionsExecutionPolicy:
            StateMachineName: !Sub '${TablePrefix}_heal_step_function'
        - CloudWatchLogsFullAccess
  FetchImportsStateMachineLogs:
    Type: AWS::Logs::LogGroup
  FetchImportsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub '${TablePrefix}_fetch_imports_step_function'
      Type: EXPRESS
      DefinitionUri: ./stepFunctions/fetchImports.asl.yaml
      Tracing:
        Enabled: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup: 
              LogGroupArn: !GetAtt FetchImportsStateMachineLogs.Arn
        IncludeExecutionData: true
        Level: ALL
      DefinitionSubstitutions:
        WMLFunctionArn: !GetAtt WMLFunction.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref WMLFunction
        - CloudWatchLogsFullAccess

Outputs:
  UserPoolClient:
      Description: The client ID for the player user pool
      Value: !Ref UserPoolClient

  UserPoolId:
      Description: The internal ID for the player user pool
      Value: !Ref UserPool

  WebSocketURI:
      Description: "The WSS Protocol URI to connect to for realtime control messages"
      Value: !Join [ '', [ 'wss://', !Ref RealTimeWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'RealTimeStage'] ]

  WebSocketApiId:
      Description: "The ID of the API for realtime controll"
      Value: !Ref RealTimeWebSocket

  AppBaseURL:
      Description: "The base URL of the CloudFront distribution of the app"
      Value: !GetAtt ImageCloudFrontDistribution.DomainName
