AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  mtw-app

  SAM Template for Make The World, a serverless multiplayer text roleplaying system,
  with DynamoDB storage, React front-end and administrative tools.

Globals:
  Function:
    Environment:
      Variables:
        NODE_OPTIONS: '--enable-source-maps'
Parameters:
  TablePrefix:
    Type: String
    Default: 'mtw'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  #
  # CognitoCallbackURL may be a useless parameter:  Worth reinvestigating the lifecycle of token assignment, and whether
  # the '.aud' comparison is providing any added security.
  #
  CognitoCallbackURL:
    Type: String
    Default: 'http://localhost:3000'
    Description: (Required) The URL that Cognito should return control to, after authorizing a user.


Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    UpdateReplacePolicy: Retain
    Properties:
      UserPoolName: !Sub ${TablePrefix}-user-UserPool
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      EmailVerificationSubject: Welcome to Make The World
      EmailVerificationMessage: >
          Thank you for signing up for Make The World.  Here is your verification code (the system will ask for it): {####}
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: false
          RequireUppercase: false
          RequireNumbers: false
          RequireSymbols: false
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${TablePrefix}-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      CallbackURLs:
        - !Ref CognitoCallbackURL

  RealTimeWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MTWRealTimeSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.service"
  ControlChannelPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ControlChannelFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ControlChannelFunction
      Principal: apigateway.amazonaws.com
  ControlChannelFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
          - app.js
    Properties:
      Tracing: Active
      CodeUri: lambda/controlChannel/
      Handler: app.handler
      MemorySize: 512
      Runtime: nodejs14.x
      Timeout: 20
      Environment:
        Variables:
          TABLE_PREFIX: !Ref TablePrefix
          EPHEMERA_SERVICE: !GetAtt EphemeraFunction.Arn
          ASSETS_SERVICE: !GetAtt AssetsFunction.Arn
          WEBSOCKET_API: !Join [ '', [ 'https://', !Ref RealTimeWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/', 'Prod'] ]
          COGNITO_USER_POOL_CLIENT: !Ref UserPoolClient
          COGNITO_KEYS_URL:
            Fn::Sub:
              - "https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}/.well-known/jwks.json"
              -
                  Region: !Ref AWS::Region
                  CognitoUserPool: !Ref UserPool
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub '${TablePrefix}_assets'
        - DynamoDBCrudPolicy:
            TableName: !Sub '${TablePrefix}_ephemera'
        - DynamoDBCrudPolicy:
            TableName: !Sub '${TablePrefix}_messages'
        - DynamoDBReadPolicy:
            TableName: !Sub '${TablePrefix}_message_delta'
        - Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !GetAtt EphemeraFunction.Arn
              - !GetAtt AssetsFunction.Arn
        - Statement:
          - Effect: Allow
            Action: execute-api:ManageConnections
            Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:**/@connections/*'
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RealTimeWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
          Fn::Sub:
              - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${ChannelArn}/invocations"
              -
                  Region: !Ref AWS::Region
                  ChannelArn: !GetAtt ControlChannelFunction.Arn
      RequestTemplates:
        application/json: >
          {
            "action": "disconnect"
          }
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
      #
      # $connect is the only WebSocket action that can take a query parameter:  We pass a JWT token
      # from Cognito to authenticate
      #
      RequestParameters:
          route.request.querystring.Authorization:
            Required: false
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RealTimeWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
          Fn::Sub:
              - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${ChannelArn}/invocations"
              -
                  Region: !Ref AWS::Region
                  ChannelArn: !GetAtt ControlChannelFunction.Arn
      RequestTemplates:
        application/json: >
          {
            "action": "connect"
          }
  PingRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteKey: ping
      AuthorizationType: NONE
      OperationName: PingRoute
      RouteResponseSelectionExpression: "$default"
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref PingInteg
  PingInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RealTimeWebSocket
      Description: Ping Integration
      IntegrationType: MOCK
      PassthroughBehavior: WHEN_NO_MATCH
      TemplateSelectionExpression: "application/json"
      RequestTemplates:
        application/json: >
          {
            "statusCode": 200
          }
  PingIntegrationResponse:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties:
      ApiId: !Ref RealTimeWebSocket
      IntegrationId: !Ref PingInteg
      TemplateSelectionExpression: "$integration.response.statuscode"
      IntegrationResponseKey: "/200/"
      ResponseTemplates:
        "200": >
          {
            "statusCode": 200,
            "type": "pong"
          }
  PingResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteId: !Ref PingRoute
      RouteResponseKey: "$default"
  #
  # The Route defines the mapping from a key to a particular integration.  In this case, the $default
  # key catches everything not specified explicitly
  #
  EphemeraRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteKey: ephemera
      AuthorizationType: NONE
      OperationName: EphemeraRoute
      RouteResponseSelectionExpression: $default
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref EphemeraInteg
  #
  # The integration connects the incoming message with a specific target.  In this case, we use
  # a direct AWS-PROXY to integrate with our lambda invocation, passing the incoming message
  # unchanged.
  #
  EphemeraInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RealTimeWebSocket
      Description: Ephemera Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
          Fn::Sub:
              - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${ChannelArn}/invocations"
              -
                  Region: !Ref AWS::Region
                  ChannelArn: !GetAtt ControlChannelFunction.Arn
  #
  # According to documentation, an IntegrationResponse shouldn't be necessary, but whenever
  # I don't include it, messaging goes wonky.  Maybe it's superstition at this point, but I'm
  # leaving it in.
  #
  EphemeraIntegrationResponse:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties:
      ApiId: !Ref RealTimeWebSocket
      IntegrationId: !Ref EphemeraInteg
      IntegrationResponseKey: "/200/"
  #
  # A Response tells the Websocket to return the return-value of the NodeJS handler function as
  # a websocket message in response to the incoming data.  This isn't strictly necessary (we could
  # explicitly invoke the post-to-connection API), but it's convenient.
  #
  EphemeraResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteId: !Ref EphemeraRoute
      RouteResponseKey: "$default"
  #
  # Separate route and integrations for asset service
  #
  AssetRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteKey: asset
      AuthorizationType: NONE
      OperationName: AssetRoute
      RouteResponseSelectionExpression: $default
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref AssetInteg
  AssetInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RealTimeWebSocket
      Description: Asset Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
          Fn::Sub:
              - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${ChannelArn}/invocations"
              -
                  Region: !Ref AWS::Region
                  ChannelArn: !GetAtt AssetsFunction.Arn
  AssetIntegrationResponse:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties:
      ApiId: !Ref RealTimeWebSocket
      IntegrationId: !Ref AssetInteg
      IntegrationResponseKey: "/200/"
  #
  # A Response tells the Websocket to return the return-value of the NodeJS handler function as
  # a websocket message in response to the incoming data.  This isn't strictly necessary (we could
  # explicitly invoke the post-to-connection API), but it's convenient.
  #
  EphemeraResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteId: !Ref EphemeraRoute
      RouteResponseKey: "$default"
  RealTimeStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      ApiId: !Ref RealTimeWebSocket
      AutoDeploy: true
  AssetTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "AssetId"
            AttributeType: "S"
          - AttributeName: "DataCategory"
            AttributeType: "S"
          - AttributeName: "scopedId"
            AttributeType: "S"
          - AttributeName: "player"
            AttributeType: "S"
          - AttributeName: "zone"
            AttributeType: "S"
        BillingMode: "PAY_PER_REQUEST"
        KeySchema:
          - AttributeName: "AssetId"
            KeyType: "HASH"
          - AttributeName: "DataCategory"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: DataCategoryIndex
            KeySchema:
              - AttributeName: DataCategory
                KeyType: HASH
              - AttributeName: AssetId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ScopedIdIndex
            KeySchema:
              - AttributeName: scopedId
                KeyType: HASH
              - AttributeName: DataCategory
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: PlayerIndex
            KeySchema:
              - AttributeName: player
                KeyType: HASH
              - AttributeName: DataCategory
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ZoneIndex
            KeySchema:
              - AttributeName: zone
                KeyType: HASH
              - AttributeName: DataCategory
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        TableName: !Sub '${TablePrefix}_assets'
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
  EphemeraTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "EphemeraId"
            AttributeType: "S"
          - AttributeName: "DataCategory"
            AttributeType: "S"
          - AttributeName: "RoomId"
            AttributeType: "S"
          - AttributeName: "ConnectionId"
            AttributeType: "S"
        BillingMode: "PAY_PER_REQUEST"
        KeySchema:
          - AttributeName: "EphemeraId"
            KeyType: "HASH"
          - AttributeName: "DataCategory"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: DataCategoryIndex
            KeySchema:
              - AttributeName: DataCategory
                KeyType: HASH
              - AttributeName: EphemeraId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: RoomIndex
            KeySchema:
              - AttributeName: RoomId
                KeyType: HASH
              - AttributeName: EphemeraId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ConnectionIndex
            KeySchema:
              - AttributeName: ConnectionId
                KeyType: HASH
              - AttributeName: EphemeraId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        TableName: !Sub '${TablePrefix}_ephemera'
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "MessageId"
        AttributeType: "S"
      - AttributeName: "DataCategory"
        AttributeType: "S"
      - AttributeName: "CreatedTime"
        AttributeType: "N"
      BillingMode: "PAY_PER_REQUEST"
      KeySchema:
      - AttributeName: "MessageId"
        KeyType: "HASH"
      - AttributeName: "DataCategory"
        KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: DataCategoryIndex
          KeySchema:
            - AttributeName: DataCategory
              KeyType: HASH
            - AttributeName: MessageId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      LocalSecondaryIndexes:
        - IndexName: CreatedTimeIndex
          KeySchema:
            - AttributeName: "MessageId"
              KeyType: "HASH"
            - AttributeName: "CreatedTime"
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: False
      TableName: !Sub '${TablePrefix}_messages'
      TimeToLiveSpecification:
        AttributeName: ExpirationTime
        Enabled: True
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  MessageDeltaTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "Target"
            AttributeType: "S"
          - AttributeName: "DeltaId"
            AttributeType: "S"
          - AttributeName: "RowId"
            AttributeType: "S"
        BillingMode: "PAY_PER_REQUEST"
        KeySchema:
          - AttributeName: "Target"
            KeyType: "HASH"
          - AttributeName: "DeltaId"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: RowIdIndex
            KeySchema:
              - AttributeName: RowId
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
        TableName: !Sub '${TablePrefix}_message_delta'
  UtilityLambdaLayer:
      Type: AWS::Serverless::LayerVersion
      Properties:
          LayerName: utility-layer
          Description: Lambda layer to import utility functions
          ContentUri: lambda/utilitiesLayer/
          CompatibleRuntimes:
            - nodejs14.x
  EphemeraFunction:
      Type: AWS::Serverless::Function
      Properties:
          Tracing: Active
          CodeUri: lambda/ephemera/
          Timeout: 30
          Handler: app.handler
          MemorySize: 256
          Runtime: nodejs14.x
          Environment:
              Variables:
                  TABLE_PREFIX: !Ref TablePrefix
                  WEBSOCKET_API: !Join [ '', [ 'https://', !Ref RealTimeWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/', 'Prod'] ]
          Layers:
            - !Ref UtilityLambdaLayer
          Policies:
            - DynamoDBCrudPolicy:
                  TableName: !Sub '${TablePrefix}_ephemera'
            - DynamoDBCrudPolicy:
                  TableName: !Sub '${TablePrefix}_messages'
            - DynamoDBReadPolicy:
                  TableName: !Sub '${TablePrefix}_assets'
            - Statement:
              - Effect: Allow
                Action: execute-api:ManageConnections
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:**/@connections/*'
          Events:
            Stream:
              Type: DynamoDB
              Properties:
                Stream: !GetAtt EphemeraTable.StreamArn
                BatchSize: 100
                StartingPosition: LATEST
  AssetBucket:
      Type: AWS::S3::Bucket
      Properties:
          BucketName: !Sub '${TablePrefix}-assets'
          CorsConfiguration:
            CorsRules:
              -
                AllowedOrigins:
                  - "*"
                AllowedMethods:
                  - POST
                  - GET
                  - PUT
                  - DELETE
                  - HEAD
                AllowedHeaders:
                  - "*"
  CloudFrontAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
          CloudFrontOriginAccessIdentityConfig:
              Comment: Cloudfront Origin identity for MakeTheWorld
  ImageCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
          DistributionConfig:
              Enabled: True
              Origins:
                - DomainName: !GetAtt AssetBucket.RegionalDomainName
                  Id: !Sub "S3-origin-${AssetBucket}"
                  OriginPath: /images
                  S3OriginConfig:
                      OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontAccessIdentity}"
              PriceClass: PriceClass_100
              DefaultCacheBehavior:
                  AllowedMethods:
                  - GET
                  - HEAD
                  TargetOriginId: !Sub "S3-origin-${AssetBucket}"
                  ForwardedValues:
                    QueryString: 'false'
                    Cookies:
                      Forward: none
                  ViewerProtocolPolicy: allow-all
  ImageHostingPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
          Bucket: !Ref AssetBucket
          PolicyDocument:
            Statement:
              - Action:
                  - "s3:GetObject"
                Effect: Allow
                Principal:
                  AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontAccessIdentity}"
                Resource: !Sub "arn:aws:s3:::${AssetBucket}/images/*"
            Version: "2012-10-17"
  AssetsFunction:
      Type: AWS::Serverless::Function
      Metadata:
        BuildMethod: esbuild
        BuildProperties:
          Minify: true
          Target: "es2020"
          Sourcemap: true
          EntryPoints: 
            - app.js
          #
          # Sharp requires special handling by esbuild, because it uses dynamic loading of libraries to
          # deal with binaries for different operating systems
          #
          # External:
          #   - sharp
      Properties:
          CodeUri: lambda/assets/
          Handler: app.handler
          MemorySize: 512
          Runtime: nodejs14.x
          Timeout: 30
          Environment:
              Variables:
                  TABLE_PREFIX: !Ref TablePrefix
                  S3_BUCKET: !Sub '${TablePrefix}-assets'
                  WEBSOCKET_API: !Join [ '', [ 'https://', !Ref RealTimeWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/', 'Prod'] ]
                  COGNITO_POOL_ID: !Ref UserPool
          Policies:
            - DynamoDBCrudPolicy:
                TableName: !Sub '${TablePrefix}_assets'
            - DynamoDBCrudPolicy:
                TableName: !Sub '${TablePrefix}_ephemera'
            - Statement:
              - Effect: Allow
                Action: execute-api:ManageConnections
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:**/@connections/*'
            - Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:
                  Fn::Sub:
                      - "arn:aws:s3:::${AssetBucket}/*"
                      - AssetBucket: !Sub '${TablePrefix}-assets'
            - Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:ListUsers
                Resource:
                  Fn::Sub:
                      - "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}"
                      - UserPoolId: !Ref UserPool
          Events:
            Stream:
              Type: DynamoDB
              Properties:
                Stream: !GetAtt AssetTable.StreamArn
                BatchSize: 100
                StartingPosition: LATEST
            # BucketEvent:
            #   Type: S3
            #   Properties:
            #     Bucket: !Ref AssetBucket
            #     Filter:
            #       S3Key:
            #         Rules:
            #           - Name: prefix
            #             Value: upload/
            #     Events: s3:ObjectCreated:*
  MessagesFunction:
      Type: AWS::Serverless::Function
      Properties:
          CodeUri: lambda/messages/
          Handler: app.handler
          MemorySize: 128
          Runtime: nodejs14.x
          Timeout: 5
          Environment:
              Variables:
                  WEBSOCKET_API: !Join [ '', [ 'https://', !Ref RealTimeWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/', 'Prod'] ]
                  TABLE_PREFIX: !Ref TablePrefix
          Layers:
            - !Ref UtilityLambdaLayer
          Policies:
            - DynamoDBCrudPolicy:
                TableName: !Sub '${TablePrefix}_messages'
            - DynamoDBCrudPolicy:
                TableName: !Sub '${TablePrefix}_message_delta'
            - DynamoDBCrudPolicy:
                TableName: !Sub '${TablePrefix}_ephemera'
            - Statement:
                - Effect: Allow
                  Action: execute-api:ManageConnections
                  Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:**/@connections/*'
          Events:
            Stream:
              Type: DynamoDB
              Properties:
                Stream: !GetAtt MessagesTable.StreamArn
                BatchSize: 100
                StartingPosition: LATEST

Outputs:
  UserPoolClient:
      Description: The client ID for the player user pool
      Value: !Ref UserPoolClient

  UserPoolId:
      Description: The internal ID for the player user pool
      Value: !Ref UserPool

  WebSocketURI:
      Description: "The WSS Protocol URI to connect to for realtime control messages"
      Value: !Join [ '', [ 'wss://', !Ref RealTimeWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'RealTimeStage'] ]

  WebSocketApiId:
      Description: "The ID of the API for realtime controll"
      Value: !Ref RealTimeWebSocket
