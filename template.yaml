AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  mtw-app

  SAM Template for Make The World, a serverless multiplayer text roleplaying system,
  with DynamoDB storage, React front-end and administrative tools.

Parameters:
  TablePrefix:
    Type: String
    Default: 'mtw'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  PermanentsStack:
    Type: String
    Default: 'MTWPermanentsStack'
    Description: (Required) The name of the stack containing the permanents DynamoDB table.
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'

Resources:
  RealTimeWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MTWRealTimeSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.message"
  ControlChannelPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - RealTimeWebSocket
      - ControlChannelFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ControlChannelFunction
      Principal: apigateway.amazonaws.com
  ControlChannelFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/controlChannel/
      Handler: app.handler
      MemorySize: 128
      Runtime: nodejs12.x
      Layers:
        - !Ref AppSyncLambdaLayer
      Environment:
        Variables:
          TABLE_PREFIX: !Ref TablePrefix
          APPSYNC_ENDPOINT_URL: !GetAtt AppSyncAPI.GraphQLUrl
      Policies:
        - Statement:
          - Effect: Allow
            Action:
            - 'execute-api:ManageConnections'
            Resource:
            - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RealTimeWebSocket}/*'
        - Statement:
          - Effect: Allow
            Action: appsync:GraphQL
            Resource: !Sub '${AppSyncAPI}/*'
        - DynamoDBCrudPolicy:
              TableName: !Sub '${TablePrefix}_ephemera'
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RealTimeWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
          Fn::Sub:
              - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${ChannelArn}/invocations"
              -
                  Region: !Ref AWS::Region
                  ChannelArn: !GetAtt ControlChannelFunction.Arn
      RequestTemplates:
        application/json: >
          {
            "action": "disconnect"
          }
  PingRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteKey: ping
      AuthorizationType: NONE
      OperationName: PingRoute
      RouteResponseSelectionExpression: "$default"
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref PingInteg
  PingInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RealTimeWebSocket
      Description: Ping Integration
      IntegrationType: MOCK
      PassthroughBehavior: WHEN_NO_MATCH
      TemplateSelectionExpression: "application/json"
      RequestTemplates:
        application/json: >
          {
            "statusCode": 200
          }
  PingIntegrationResponse:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties:
      ApiId: !Ref RealTimeWebSocket
      IntegrationId: !Ref PingInteg
      TemplateSelectionExpression: "$integration.response.statuscode"
      IntegrationResponseKey: "/200/"
      ResponseTemplates:
        "200": >
          {
            "statusCode": 200,
            "type": "pong"
          }
  PingResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteId: !Ref PingRoute
      RouteResponseKey: "$default"
  RegisterCharacterRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteKey: registercharacter
      AuthorizationType: NONE
      OperationName: RegisterCharacterRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref RegisterCharacterInteg
  RegisterCharacterInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RealTimeWebSocket
      Description: Register Name Integtration
      IntegrationType: AWS_PROXY
      IntegrationUri:
          Fn::Sub:
              - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${ChannelArn}/invocations"
              -
                  Region: !Ref AWS::Region
                  ChannelArn: !GetAtt ControlChannelFunction.Arn
  RegisterCharacterIntegrationResponse:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties:
      ApiId: !Ref RealTimeWebSocket
      IntegrationId: !Ref RegisterCharacterInteg
      IntegrationResponseKey: "/200/"
  RegisterCharacterResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref RealTimeWebSocket
      RouteId: !Ref RegisterCharacterRoute
      RouteResponseKey: "$default"
  RealTimeDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - PingRoute
    - RegisterCharacterRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref RealTimeWebSocket
  RealTimeStage:
    Type: AWS::ApiGatewayV2::Stage
    DependsOn:
      - RealTimeDeployment
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref RealTimeDeployment
      ApiId: !Ref RealTimeWebSocket
  EphemeraTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "EphemeraId"
            AttributeType: "S"
          - AttributeName: "DataCategory"
            AttributeType: "S"
        BillingMode: "PAY_PER_REQUEST"
        KeySchema:
          - AttributeName: "EphemeraId"
            KeyType: "HASH"
          - AttributeName: "DataCategory"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: DataCategoryIndex
            KeySchema:
              - AttributeName: DataCategory
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        TableName: !Sub '${TablePrefix}_ephemera'
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "Target"
        AttributeType: "S"
      - AttributeName: "DataCategory"
        AttributeType: "S"
      BillingMode: "PAY_PER_REQUEST"
      KeySchema:
      - AttributeName: "Target"
        KeyType: "HASH"
      - AttributeName: "DataCategory"
        KeyType: "RANGE"
      SSESpecification:
        SSEEnabled: False
      TableName: !Sub '${TablePrefix}_messages'
      TimeToLiveSpecification:
        AttributeName: ExpirationTime
        Enabled: True
  AppSyncLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
        LayerName: appsync-layer
        Description: Lambda layer to import the appsync libraries
        ContentUri: lambda/appSyncLayer/
        CompatibleRuntimes:
          - nodejs12.x
  UUIDLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
        LayerName: uuid-layer
        Description: Lambda layer to import the uuid library
        ContentUri: lambda/uuidLayer/
        CompatibleRuntimes:
          - nodejs12.x

  StorageAPIExecutionRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Statement:
              - Effect: Allow
                Principal:
                    Service: apigateway.amazonaws.com
                Action:
                    - sts:AssumeRole
        Policies:
          - PolicyName: AdminLambdaPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    - !GetAtt PermanentsFunction.Arn
          - PolicyName: StorageS3Policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - s3:GetObject
                  Resource:
                      Fn::Sub:
                        - "arn:aws:s3:::${StorageBucket}/*"
                        - StorageBucket:
                            Fn::ImportValue:
                              !Sub "${PermanentsStack}-StorageBucket"
  StorageApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: StorageApi
  BackupPathResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt StorageApi.RootResourceId
      RestApiId: !Ref StorageApi
      PathPart: 'backups'
  BackupResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref BackupPathResource
      RestApiId: !Ref StorageApi
      PathPart: '{PermanentId+}'
  BackupProxyMethod:
    Type: 'AWS::ApiGateway::Method'
    DependsOn:
      - BackupResource
      - StorageAPIExecutionRole
      - PermanentsFunction
    Properties:
      HttpMethod: GET
      ResourceId: !Ref BackupResource
      RestApiId: !Ref StorageApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.PermanentId: true
      Integration:
        CacheKeyParameters:
          - 'method.request.path.PermanentId'
        RequestParameters:
            integration.request.path.PermanentId: 'method.request.path.PermanentId'
        IntegrationHttpMethod: GET
        Type: AWS
        Credentials: !GetAtt StorageAPIExecutionRole.Arn
        Uri:
            Fn::Sub:
                - "arn:aws:apigateway:${Region}:s3:path/${StorageBucket}/backups/{PermanentId}"
                -
                    Region: !Ref AWS::Region
                    StorageBucket:
                        Fn::ImportValue:
                            !Sub "${PermanentsStack}-StorageBucket"
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.content-disposition: "'attachment'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.content-disposition: true
  UploadBackupOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    DependsOn:
      - BackupResource
    Properties:
      HttpMethod: OPTIONS
      ResourceId: !Ref BackupPathResource
      RestApiId: !Ref StorageApi
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: "{ \"statusCode\": 200 }"
            ResponseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.X-Requested-With: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
  UploadBackupMethod:
    Type: 'AWS::ApiGateway::Method'
    DependsOn:
      - BackupResource
      - StorageAPIExecutionRole
      - PermanentsFunction
    Properties:
      HttpMethod: POST
      ResourceId: !Ref BackupPathResource
      RestApiId: !Ref StorageApi
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.PermanentId: true
      Integration:
        RequestParameters:
            integration.request.path.PermanentId: 'method.request.path.PermanentId'
        IntegrationHttpMethod: POST
        Type: AWS
        Credentials: !GetAtt StorageAPIExecutionRole.Arn
        Uri:
            Fn::Sub:
                - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${AdminArn}/invocations"
                -
                    Region: !Ref AWS::Region
                    AdminArn: !GetAtt PermanentsFunction.Arn
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: 500
            SelectionPattern: "Parsing error.*"
            ResponseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: 400
            SelectionPattern: "Error.*"
            ResponseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: >
              {
                "action": "uploadBackup",
                "body": $input.json('$')
              }
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.X-Requested-With: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 400
          ResponseParameters:
            method.response.header.X-Requested-With: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 500
          ResponseParameters:
            method.response.header.X-Requested-With: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
  StorageDeployment:
      DependsOn:
        - BackupProxyMethod
        - UploadBackupMethod
        - UploadBackupOptionsMethod
      Type: 'AWS::ApiGateway::Deployment'
      Properties:
        RestApiId: !Ref StorageApi
        StageName: storage

  AppSyncAPI:
      Type: AWS::AppSync::GraphQLApi
      Properties:
          Name: !Sub ${TablePrefix}AppSyncAPI
          AuthenticationType: AMAZON_COGNITO_USER_POOLS
          UserPoolConfig:
              AwsRegion: !Ref AWS::Region
              UserPoolId:
                Fn::ImportValue:
                  !Sub "${PermanentsStack}-UserPoolId"
              DefaultAction: ALLOW
          AdditionalAuthenticationProviders:
              - AuthenticationType: AWS_IAM
  AppSyncAPIExecutionRole:
      Type: AWS::IAM::Role
      Properties:
          AssumeRolePolicyDocument:
              Statement:
                - Effect: Allow
                  Principal:
                      Service: appsync.amazonaws.com
                  Action:
                      - sts:AssumeRole
          Policies:
            - PolicyName: TablesPolicy
              PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                    - Effect: "Allow"
                      Action:
                          - "dynamodb:GetItem"
                          - "dynamodb:BatchGetItem"
                          - "dynamodb:Query"
                          - "dynamodb:PutItem"
                          - "dynamodb:UpdateItem"
                          - "dynamodb:Scan"
                      Resource:
                          - !Sub "arn:aws:dynamodb:*:*:table/${TablePrefix}_permanents"
                          - !Sub "arn:aws:dynamodb:*:*:table/${TablePrefix}_messages"
            - PolicyName: IndexesPolicy
              PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                    - Effect: "Allow"
                      Action:
                          - "dynamodb:Query"
                      Resource:
                          - !Sub "arn:aws:dynamodb:*:*:table/${TablePrefix}_permanents/*"
                          - !Sub "arn:aws:dynamodb:*:*:table/${TablePrefix}_messages/*"
            - PolicyName: AppSyncLambdasPolicy
              PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                    - Effect: Allow
                      Action: appsync:GraphQL
                      Resource: !Sub '${AppSyncAPI}/*'
                    - Effect: "Allow"
                      Action:
                          - "lambda:InvokeFunction"
                      Resource:
                        - !GetAtt PutRoomFunction.Arn
                        - !GetAtt PermanentsFunction.Arn
                        - !GetAtt CharactersInPlayFunction.Arn
  PermanentsDynamoDBTableDataSource:
      Type: AWS::AppSync::DataSource
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          Name: Permanents
          Type: AMAZON_DYNAMODB
          ServiceRoleArn: !GetAtt "AppSyncAPIExecutionRole.Arn"
          DynamoDBConfig:
              AwsRegion: !Ref AWS::Region
              TableName: !Sub ${TablePrefix}_permanents
  MessagesDynamoDBTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
        ApiId: !GetAtt AppSyncAPI.ApiId
        Name: Messages
        Type: AMAZON_DYNAMODB
        ServiceRoleArn: !GetAtt "AppSyncAPIExecutionRole.Arn"
        DynamoDBConfig:
            AwsRegion: !Ref AWS::Region
            TableName: !Sub ${TablePrefix}_messages
  InitializeFunction:
      Type: AWS::Serverless::Function
      Properties:
          CodeUri: lambda/permanents/initialize/
          Handler: app.handler
          MemorySize: 128
          Runtime: nodejs12.x
          Timeout: 3
          Environment:
              Variables:
                  TABLE_PREFIX: !Ref TablePrefix
          Policies:
            - DynamoDBCrudPolicy:
                  TableName: !Sub '${TablePrefix}_permanents'
  QueryGetPlayerResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
        ApiId: !GetAtt AppSyncAPI.ApiId
        TypeName: Query
        FieldName: getPlayer
        DataSourceName: !GetAtt PermanentsDynamoDBTableDataSource.Name
        RequestMappingTemplate: >
            {
                "version": "2017-02-28",
                "operation": "GetItem",
                "key": {
                    "PermanentId": $util.dynamodb.toStringJson("PLAYER#${ctx.args.PlayerName}"),
                    "DataCategory": $util.dynamodb.toStringJson("Details")
                }
            }
        ResponseMappingTemplate: >
            #set($Consent = false)
            #if ($ctx.result && $util.isBoolean($ctx.result.CodeOfConductConsent))
                #set($Consent = $ctx.result.CodeOfConductConsent)
            #end
            $util.toJson({
                "PlayerName": $ctx.args.PlayerName,
                "CodeOfConductConsent": $Consent
            })
  MutationPutPlayerResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
        ApiId: !GetAtt AppSyncAPI.ApiId
        TypeName: Mutation
        FieldName: putPlayer
        DataSourceName: !GetAtt PermanentsDynamoDBTableDataSource.Name
        RequestMappingTemplate: >
            $util.qr($ctx.stash.put("PlayerName", $ctx.args.PlayerName))
            #if ($util.isNullOrEmpty($PlayerName))
              $util.qr($ctx.stash.put("PlayerName", $context.identity.username))
            #end
            {
                "version": "2017-02-28",
                "operation": "PutItem",
                "key": {
                    "PermanentId": $util.dynamodb.toStringJson("PLAYER#${ctx.stash.PlayerName}"),
                    "DataCategory": $util.dynamodb.toStringJson("Details")
                },
                "attributeValues": {
                    "CodeOfConductConsent":
                      #if($ctx.args.CodeOfConductConsent)
                        $util.dynamodb.toBooleanJson($ctx.args.CodeOfConductConsent)
                      #else
                        $util.dynamodb.toBooleanJson(false)
                      #end
                }
            }
        ResponseMappingTemplate: >
          $util.toJson({
            "Type": "PLAYER",
            "PlayerName": $ctx.stash.PlayerName,
            "PlayerInfo": {
              "PlayerName": $ctx.stash.PlayerName,
              "CodeOfConductConsent": $util.defaultIfNull($ctx.result.CodeOfConductConsent, false)
            }
          })
  QueryGetCharacterResolver:
      Type: AWS::AppSync::Resolver
      DependsOn: Schema
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Query
          FieldName: getCharacter
          DataSourceName: !GetAtt PermanentsDataSource.Name
          RequestMappingTemplate: >
              $util.qr($ctx.args.put("action", "getCharacter"))
              {
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": $util.toJson($ctx.args)
              }
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  QueryPlayerCharactersResolver:
      Type: AWS::AppSync::Resolver
      DependsOn: Schema
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Query
          FieldName: getPlayerCharacters
          DataSourceName: !GetAtt PermanentsDataSource.Name
          RequestMappingTemplate: >
              #set($arguments = {})
              $util.qr($arguments.put("PlayerName", $context.identity.username))
              $util.qr($arguments.put("action", "getPlayerCharacters"))
              {
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": $util.toJson($arguments)
              }
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  QueryAllCharactersResolver:
      Type: AWS::AppSync::Resolver
      DependsOn: Schema
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Query
          FieldName: getAllCharacters
          DataSourceName: !GetAtt PermanentsDataSource.Name
          RequestMappingTemplate: >
              {
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": { "action": "getAllCharacters" }
              }
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  PutCharacterResolver:
      Type: AWS::AppSync::Resolver
      DependsOn: Schema
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Mutation
          FieldName: putCharacter
          DataSourceName: !GetAtt PermanentsDataSource.Name
          RequestMappingTemplate: >
              #set($arguments = $ctx.args)
              $util.qr($arguments.put("PlayerName", $context.identity.username))
              $util.qr($arguments.put("action", "putCharacter"))
              {
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": $util.toJson($arguments)
              }
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  MutationExternalPutCharacter:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - Schema
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: Mutation
      FieldName: externalPutCharacter
      DataSourceName: !GetAtt NoneDataSource.Name
      RequestMappingTemplate: >
          {
              "version": "2017-02-28",
              "payload": $util.toJson($ctx.args)
          }
      ResponseMappingTemplate: >
          #set($result = $ctx.result)
          [{ "Character": $util.toJson($result) }]
  CharactersInPlayFunction:
      Type: AWS::Serverless::Function
      Properties:
          CodeUri: lambda/ephemera/charactersInPlay/
          Handler: app.handler
          MemorySize: 256
          Runtime: nodejs12.x
          Layers:
              - !Ref UUIDLambdaLayer
              - !Ref AppSyncLambdaLayer
          Environment:
              Variables:
                  TABLE_PREFIX: !Ref TablePrefix
                  APPSYNC_ENDPOINT_URL: !GetAtt AppSyncAPI.GraphQLUrl
          Policies:
            - DynamoDBCrudPolicy:
                  TableName: !Sub '${TablePrefix}_ephemera'
            - DynamoDBReadPolicy:
                  TableName: !Sub '${TablePrefix}_permanents'
            - Statement:
                - Effect: Allow
                  Action: appsync:GraphQL
                  Resource: !Sub '${AppSyncAPI}/*'
  CharactersInPlayDataSource:
      Type: AWS::AppSync::DataSource
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          Name: CharactersInPlayLambda
          Type: AWS_LAMBDA
          ServiceRoleArn: !GetAtt AppSyncAPIExecutionRole.Arn
          LambdaConfig:
              LambdaFunctionArn: !GetAtt CharactersInPlayFunction.Arn
  QueryGetCharactersInPlay:
      Type: AWS::AppSync::Resolver
      DependsOn: Schema
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Query
          FieldName: getCharactersInPlay
          DataSourceName: !GetAtt CharactersInPlayDataSource.Name
          RequestMappingTemplate: >
              $util.toJson({
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": {
                    "action": "getCharactersInPlay"
                  }
              })
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  QueryGetNeighborhoodTree:
      Type: AWS::AppSync::Resolver
      DependsOn: Schema
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Query
          FieldName: getNeighborhoodTree
          DataSourceName: !GetAtt PermanentsDataSource.Name
          RequestMappingTemplate: >
              {
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": { "action": "getNodeTree" }
              }
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  QueryGetNeighborhood:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - Schema
      - PermanentsDataSource
    Properties:
        ApiId: !GetAtt AppSyncAPI.ApiId
        TypeName: Query
        FieldName: getNeighborhood
        DataSourceName: !GetAtt PermanentsDataSource.Name
        RequestMappingTemplate: >
            {
                "version": "2017-02-28",
                "operation": "Invoke",
                "payload": {
                    "action": "getNeighborhood",
                    "PermanentId": $utils.toJson($ctx.args.PermanentId)
                }
            }
        ResponseMappingTemplate: "$util.toJson($ctx.result)"
  QueryGetRoom:
      Type: AWS::AppSync::Resolver
      DependsOn: Schema
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Query
          FieldName: getRoom
          DataSourceName: !GetAtt PermanentsDynamoDBTableDataSource.Name
          RequestMappingTemplate: >
              #set($PermanentId = "ROOM#${ctx.args.PermanentId}")
              {
                  "version": "2017-02-28",
                  "operation": "Query",
                  "query": {
                      "expression": "PermanentId = :PermanentId",
                      "expressionValues": {
                          ":PermanentId": $util.dynamodb.toDynamoDBJson($PermanentId)
                      }
                  }
              }
          ResponseMappingTemplate: >
              #set($output = { "Type": "ROOM" })
              #set($entries = [])
              #set($exits = [])
              #foreach($row in $ctx.result.items)
                  #if ($row.DataCategory == 'Details')
                      $util.qr($output.put("PermanentId", $row.PermanentId.substring(5)))
                      $util.qr($output.put("ParentId", $row.ParentId))
                      $util.qr($output.put("Name", $row.Name))
                      $util.qr($output.put("Description", $row.Description))
                      $util.qr($output.put("Visibility", "Public"))
                      #if ($row.Retired == 'RETIRED')
                        $util.qr($output.put("Retired", true))
                      #else
                        $util.qr($output.put("Retired", false))
                      #end
                  #end
                  #if ($row.DataCategory.startsWith('EXIT#'))
                      #set($roomId = $row.DataCategory.substring(5))
                      $util.qr($exits.add({
                          "Name": $row.Name,
                          "RoomId": $roomId
                      }))
                  #end
                  #if ($row.DataCategory.startsWith('ENTRY#'))
                      #set($roomId = $row.DataCategory.substring(6))
                      $util.qr($entries.add({
                          "Name": $row.Name,
                          "RoomId": $roomId
                      }))
                  #end
              #end
              $util.qr($output.put("Exits", $exits))
              $util.qr($output.put("Entries", $entries))
              $util.qr($output.put("Grants", []))
              $util.toJson($output)
  QueryGetRoomRecap:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
        ApiId: !GetAtt AppSyncAPI.ApiId
        TypeName: Query
        FieldName: getRoomRecap
        DataSourceName: !GetAtt MessagesDynamoDBTableDataSource.Name
        RequestMappingTemplate: >
            {
                "version": "2017-02-28",
                "operation": "Query",
                "query": {
                  "expression": "Target = :RoomId",
                  "expressionValues": {
                      ":RoomId": $util.dynamodb.toDynamoDBJson("ROOM#$ctx.args.PermanentId")
                  }
                },
                "scanIndexForward": false,
                "limit": 10
            }
        ResponseMappingTemplate: >
            #set($output = [])
            #foreach($message in $ctx.result.items)
                #set($split = $message.DataCategory.split("#"))
                $util.qr($output.add({
                    "Target": "$ctx.result.Target",
                    "RoomId": "$ctx.args.PermanentId",
                    "Type": "$util.defaultIfNull($message.Type, 'ROOM')",
                    "CreatedTime": $split[0],
                    "MessageId": "$split[1]",
                    "Recap": true,
                    "Message": "$message.Message",
                    "FromCharacterId": "$util.defaultIfNull($message.FromCharacterId, '')",
                    "Title": "$util.defaultIfNull($message.Title, '')"
                }))
            #end
            $util.toJson($output)
  QueryGetRoles:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
        ApiId: !GetAtt AppSyncAPI.ApiId
        TypeName: Query
        FieldName: getRoles
        DataSourceName: !GetAtt PermanentsDynamoDBTableDataSource.Name
        RequestMappingTemplate: >
            {
                "version": "2017-02-28",
                "operation": "Query",
                "query": {
                  "expression": "PermanentId = :Admin and begins_with(DataCategory, :Role)",
                  "expressionValues": {
                      ":Admin": $util.dynamodb.toStringJson("ADMIN"),
                      ":Role": $util.dynamodb.toStringJson("ROLE#")
                  }
                }
            }
        ResponseMappingTemplate: >
            #set($output = [])
            #foreach($role in $ctx.result.items)
                #set($roleId = $role.DataCategory.split("#")[1])
                $util.qr($output.add({
                    "RoleId": $roleId,
                    "Name": $role.Name,
                    "Actions": $role.Actions
                }))
            #end
            $util.toJson($output)
  QueryGetMapsResolver:
      Type: AWS::AppSync::Resolver
      DependsOn: Schema
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Query
          FieldName: getMaps
          DataSourceName: !GetAtt PermanentsDataSource.Name
          RequestMappingTemplate: >
              {
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": { "action": "getMaps" }
              }
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  MutationPutMapResolver:
      Type: AWS::AppSync::Resolver
      DependsOn: Schema
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Mutation
          FieldName: putMap
          DataSourceName: !GetAtt PermanentsDataSource.Name
          RequestMappingTemplate: >
              #set($arguments = $ctx.args)
              $util.qr($arguments.put("action", "putMap"))
              {
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": $utils.toJson($arguments)
              }
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  MutationAddCharacterInPlay:
      Type: AWS::AppSync::Resolver
      DependsOn: Schema
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Mutation
          FieldName: addCharacterInPlay
          DataSourceName: !GetAtt CharactersInPlayDataSource.Name
          RequestMappingTemplate: >
              {
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": {
                    "action": "putCharacterInPlay",
                    "CharacterId": $util.toJson($ctx.args.CharacterId)
                  }
              }
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  MutationDeleteCharacterInPlayResolver:
      Type: AWS::AppSync::Resolver
      DependsOn: Schema
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Mutation
          FieldName: deleteCharacterInPlay
          DataSourceName: !GetAtt CharactersInPlayDataSource.Name
          RequestMappingTemplate: >
              {
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": {
                    "action": "deleteCharacterInPlay",
                    "CharacterId": $util.toJson($ctx.args.CharacterId)
                  }
              }
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  MutationDisconnectResolver:
      Type: AWS::AppSync::Resolver
      DependsOn: Schema
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Mutation
          FieldName: disconnectCharacterInPlay
          DataSourceName: !GetAtt CharactersInPlayDataSource.Name
          RequestMappingTemplate: >
              {
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": {
                    "action": "disconnect",
                    "CharacterId": $util.toJson($ctx.args.CharacterId)
                  }
              }
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  MutationMoveCharacterResolver:
      Type: AWS::AppSync::Resolver
      DependsOn: Schema
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Mutation
          FieldName: moveCharacter
          DataSourceName: !GetAtt CharactersInPlayDataSource.Name
          RequestMappingTemplate: >
              #if(!($ctx.args.CharacterId))
                  $util.error("CharacterId field required")
              #end
              #if(!($ctx.args.RoomId))
                  $util.error("RoomId field required")
              #end
              {
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": {
                    "action": "putCharacterInPlay",
                    "CharacterId": $util.toJson($ctx.args.CharacterId),
                    "RoomId": $util.toJson($ctx.args.RoomId)
                  }
              }
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  MutationPutNeighborhood:
      Type: AWS::AppSync::Resolver
      DependsOn:
        - Schema
        - PermanentsDataSource
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Mutation
          FieldName: putNeighborhood
          DataSourceName: !GetAtt PermanentsDataSource.Name
          RequestMappingTemplate: >
              {
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": {
                      "action": "putNeighborhood",
                      "arguments": $utils.toJson($ctx.args)
                  }
              }
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  PermanentsFunction:
      Type: AWS::Serverless::Function
      DependsOn:
          - AppSyncAPI
      Properties:
          CodeUri: lambda/permanents/
          Handler: app.handler
          MemorySize: 256
          Runtime: nodejs12.x
          Timeout: 30
          Layers:
              - !Ref UUIDLambdaLayer
              - !Ref AppSyncLambdaLayer
          Environment:
              Variables:
                  TABLE_PREFIX: !Ref TablePrefix
                  APPSYNC_ENDPOINT_URL: !GetAtt AppSyncAPI.GraphQLUrl
                  S3_BUCKET:
                    Fn::ImportValue:
                      !Sub "${PermanentsStack}-StorageBucket"
          Policies:
            - Statement:
              - Effect: Allow
                Action: appsync:GraphQL
                Resource: !Sub '${AppSyncAPI}/*'
            - Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  Fn::Sub:
                      - "arn:aws:s3:::${StorageBucket}/*"
                      - StorageBucket:
                          Fn::ImportValue:
                            !Sub "${PermanentsStack}-StorageBucket"
            - DynamoDBCrudPolicy:
                  TableName: !Sub '${TablePrefix}_permanents'
  PermanentsDataSource:
      Type: AWS::AppSync::DataSource
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          Name: PermanentsLambda
          Type: AWS_LAMBDA
          ServiceRoleArn: !GetAtt AppSyncAPIExecutionRole.Arn
          LambdaConfig:
              LambdaFunctionArn: !GetAtt PermanentsFunction.Arn
  QueryGetSettings:
      Type: AWS::AppSync::Resolver
      DependsOn:
        - Schema
        - PermanentsFunction
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Query
          FieldName: getSettings
          DataSourceName: !GetAtt PermanentsDataSource.Name
          RequestMappingTemplate: >
              {
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": {
                      "action": "getSettings"
                  }
              }
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  MutationPutSettings:
      Type: AWS::AppSync::Resolver
      DependsOn:
        - Schema
        - PermanentsFunction
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Mutation
          FieldName: putSettings
          DataSourceName: !GetAtt PermanentsDataSource.Name
          RequestMappingTemplate: >
              $util.qr($ctx.args.put("action", "putSettings"))
              {
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": $util.toJson($ctx.args)
              }
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  QueryGetBackups:
      Type: AWS::AppSync::Resolver
      DependsOn:
        - Schema
        - PermanentsFunction
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Query
          FieldName: getBackups
          DataSourceName: !GetAtt PermanentsDataSource.Name
          RequestMappingTemplate: >
              {
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": {
                      "action": "getBackups"
                  }
              }
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  MutationPutBackup:
      Type: AWS::AppSync::Resolver
      DependsOn:
        - Schema
        - PermanentsFunction
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Mutation
          FieldName: putBackup
          DataSourceName: !GetAtt PermanentsDataSource.Name
          RequestMappingTemplate: >
              $util.qr($ctx.args.put("action", "putBackup"))
              {
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": $util.toJson($ctx.args)
              }
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  MutationCreateBackup:
      Type: AWS::AppSync::Resolver
      DependsOn:
        - Schema
        - PermanentsFunction
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Mutation
          FieldName: createBackup
          DataSourceName: !GetAtt PermanentsDataSource.Name
          RequestMappingTemplate: >
              $util.qr($ctx.args.put("action", "createBackup"))
              {
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": $util.toJson($ctx.args)
              }
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  MutationRestoreBackup:
      Type: AWS::AppSync::Resolver
      DependsOn:
        - Schema
        - PermanentsFunction
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          TypeName: Mutation
          FieldName: restoreBackup
          DataSourceName: !GetAtt PermanentsDataSource.Name
          RequestMappingTemplate: >
              $util.qr($ctx.args.put("action", "restoreBackup"))
              {
                  "version": "2017-02-28",
                  "operation": "Invoke",
                  "payload": $util.toJson($ctx.args)
              }
          ResponseMappingTemplate: "$util.toJson($ctx.result)"
  NoneDataSource:
    Type: AWS::AppSync::DataSource
    DependsOn:
      - Schema
    Properties:
        ApiId: !GetAtt AppSyncAPI.ApiId
        Name: NoneSource
        Type: NONE
  MutationExternalUpdateGrant:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - Schema
    Properties:
        ApiId: !GetAtt AppSyncAPI.ApiId
        TypeName: Mutation
        FieldName: externalUpdateGrant
        DataSourceName: !GetAtt NoneDataSource.Name
        RequestMappingTemplate: >
            {
                "version": "2017-02-28",
                "payload": $util.toJson($ctx.args)
            }
        ResponseMappingTemplate: >
            #set($result = $ctx.result)
            #set($grant = $result.Grant)
            $util.toJson({
                  "Type": "$result.Type",
                  "PlayerName": "$result.PlayerName",
                  "CharacterId": "$result.CharacterId",
                  "GrantInfo": $grant
            })
  PutRoomFunction:
      Type: AWS::Serverless::Function
      Properties:
          CodeUri: lambda/permanents/putRoom/
          Handler: app.handler
          MemorySize: 256
          Runtime: nodejs12.x
          Layers:
              - !Ref UUIDLambdaLayer
          Environment:
              Variables:
                  TABLE_PREFIX: !Ref TablePrefix
          Policies:
            - DynamoDBCrudPolicy:
                  TableName: !Sub '${TablePrefix}_permanents'
  PutRoomDataSource:
      Type: AWS::AppSync::DataSource
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          Name: PutRoom
          Type: AWS_LAMBDA
          ServiceRoleArn: !GetAtt AppSyncAPIExecutionRole.Arn
          LambdaConfig:
              LambdaFunctionArn: !GetAtt PutRoomFunction.Arn
  MutationPutRoom:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - Schema
      - PutRoomFunction
    Properties:
        ApiId: !GetAtt AppSyncAPI.ApiId
        TypeName: Mutation
        FieldName: putRoom
        DataSourceName: !GetAtt PutRoomDataSource.Name
        RequestMappingTemplate: >
            {
                "version": "2017-02-28",
                "operation": "Invoke",
                "payload": {
                    "arguments": $utils.toJson($ctx.args)
                }
            }
        ResponseMappingTemplate: "$util.toJson($ctx.result)"
  MutationPutRoomMessage:
      Type: AWS::AppSync::Resolver
      DependsOn: Schema
      Properties:
        ApiId: !GetAtt AppSyncAPI.ApiId
        TypeName: Mutation
        FieldName: putRoomMessage
        DataSourceName: !GetAtt MessagesDynamoDBTableDataSource.Name
        RequestMappingTemplate: >
            #set($args = $ctx.args)
            #if($util.isNullOrEmpty($args.RoomId))
                $util.error("RoomId field required")
            #end
            #set ($MessageId = $util.defaultIfNullOrBlank($args.MessageId, $util.autoId()))
            #set ($CreatedTime = $util.defaultIfNull($args.CreatedTime, $util.time.nowEpochMilliSeconds()))
            #set ($MessageType = $util.defaultIfNullOrBlank($args.MessageType, "ROOM"))
            #set ($ExpirationTime = $util.time.nowEpochSeconds() + 600)
            #set( $ddb = $util.dynamodb )
            {
                "version": "2018-05-29",
                "operation": "PutItem",
                "key": {
                    "Target": $ddb.toDynamoDBJson("ROOM#${args.RoomId}"),
                    "DataCategory": $ddb.toDynamoDBJson("${CreatedTime}#${MessageId}")
                },
                "attributeValues": {
                    "ExpirationTime": $ddb.toNumberJson($ExpirationTime),
                    "Recap": $ddb.toBooleanJson(false),
                    "Type": $ddb.toStringJson($MessageType)
                    #if(!$util.isNullOrEmpty($args.Message)), "Message": $ddb.toStringJson($args.Message) #end
                    #if(!$util.isNullOrEmpty($args.FromCharacterId)), "FromCharacterId": $ddb.toStringJson($args.FromCharacterId) #end
                    #if(!$util.isNullOrEmpty($args.Title)), "Title": $ddb.toStringJson($args.Title) #end
                }
            }
        ResponseMappingTemplate: >
            #set($split = $ctx.result.DataCategory.split("#"))
            {
                "Target": $util.toJson(${ctx.result.Target}),
                "RoomId": $util.toJson(${ctx.args.RoomId}),
                "Type": $util.toJson($util.defaultIfNull($ctx.result.Type, 'ROOM')),
                "CreatedTime": $util.toJson($split[0]),
                "MessageId": $util.toJson($split[1]),
                "Recap": $util.toJson(false),
                "Message": $util.toJson($ctx.result.Message),
                "FromCharacterId": $util.toJson($util.defaultIfNull($ctx.result.FromCharacterId, '')),
                "ToCharacterId": $util.toJson($util.defaultIfNull($ctx.result.FromCharacterId, '')),
                "Title": $util.toJson($util.defaultIfNull($ctx.result.Title, '')),
                "CharacterId": $util.toJson($util.defaultIfNull($ctx.result.CharacterId, '')),
                "ExpirationTime": $util.toJson($util.defaultIfNull($ctx.result.ExpirationTime, 0))
            }
  MutationPutDirectMessage:
      Type: AWS::AppSync::Resolver
      DependsOn: Schema
      Properties:
        ApiId: !GetAtt AppSyncAPI.ApiId
        TypeName: Mutation
        FieldName: putDirectMessage
        DataSourceName: !GetAtt MessagesDynamoDBTableDataSource.Name
        RequestMappingTemplate: >
            #set($args = $ctx.args)
            #if($util.isNullOrEmpty($args.CharacterId))
                $util.error("CharacterId field required")
            #end
            #set ($MessageId = $util.defaultIfNullOrBlank($args.MessageId, $util.autoId()))
            #set ($CreatedTime = $util.defaultIfNull($args.CreatedTime, $util.time.nowEpochMilliSeconds()))
            #set ($ExpirationTime = $util.time.nowEpochSeconds() + 600)
            #set( $ddb = $util.dynamodb )
            {
                "version": "2018-05-29",
                "operation": "PutItem",
                "key": {
                    "Target": $ddb.toDynamoDBJson("CHARACTER#${args.CharacterId}"),
                    "DataCategory": $ddb.toDynamoDBJson("${CreatedTime}#${MessageId}")
                },
                "attributeValues": {
                    "ExpirationTime": $ddb.toNumberJson($ExpirationTime),
                    "Recap": $ddb.toBooleanJson(false),
                    "Type": $ddb.toStringJson("DIRECT")
                    #if(!$util.isNullOrEmpty($args.Message)), "Message": $ddb.toStringJson($args.Message) #end
                    #if(!$util.isNullOrEmpty($args.FromCharacterId)), "FromCharacterId": $ddb.toStringJson($args.FromCharacterId) #end
                    #if(!$util.isNullOrEmpty($args.ToCharacterId)), "ToCharacterId": $ddb.toStringJson($args.ToCharacterId) #end
                }
            }
        ResponseMappingTemplate: >
            #set($split = $ctx.result.DataCategory.split("#"))
            {
                "Target": $util.toJson(${ctx.result.Target}),
                "CharacterId": $util.toJson(${ctx.args.CharacterId}),
                "Type": "DIRECT",
                "CreatedTime": $util.toJson($split[0]),
                "MessageId": $util.toJson($split[1]),
                "Recap": $util.toJson(false),
                "Message": $util.toJson($ctx.result.Message),
                "FromCharacterId": $util.toJson($util.defaultIfNull($ctx.result.FromCharacterId, '')),
                "ToCharacterId": $util.toJson($util.defaultIfNull($ctx.result.ToCharacterId, '')),
                "Title": $util.toJson($util.defaultIfNull($ctx.result.Title, '')),
                "RoomId": $util.toJson($util.defaultIfNull($ctx.result.RoomId, '')),
                "ExpirationTime": $util.toJson($util.defaultIfNull($ctx.result.ExpirationTime, 0))
            }
  Schema:
      Type: AWS::AppSync::GraphQLSchema
      Properties:
          ApiId: !GetAtt AppSyncAPI.ApiId
          Definition: >
              type Player {
                  PlayerName: String!
                  CodeOfConductConsent: Boolean
              }
              type Role @aws_iam @aws_cognito_user_pools {
                  RoleId: String!
                  Name: String!
                  Actions: String!
              }
              type Grant @aws_iam @aws_cognito_user_pools {
                  Resource: String!
                  Actions: String
                  Roles: String
              }
              type ResourceGrant @aws_iam @aws_cognito_user_pools {
                  CharacterId: String!
                  Actions: String
                  Roles: String
              }
              type ExternalGrant @aws_iam @aws_cognito_user_pools {
                  CharacterId: String!
                  Resource: String!
                  Actions: String
                  Roles: String
              }
              type Character @aws_iam @aws_cognito_user_pools {
                  PlayerName: String
                  Name: String!
                  CharacterId: String!
                  Pronouns: String
                  FirstImpression: String
                  Outfit: String
                  OneCoolThing: String
                  HomeId: String
                  Grants: [Grant]
              }
              type CharacterInPlay @aws_iam @aws_cognito_user_pools {
                  CharacterId: String!
                  RoomId: String!
                  Connected: Boolean
              }
              type Neighborhood {
                  PermanentId: String!
                  Name: String!
                  Description: String
                  ParentId: String
                  Visibility: String
                  Topology: String
                  ContextMapId: String
                  Grants: [ResourceGrant]
                  Retired: Boolean
              }
              type Exit {
                  Name: String!
                  RoomId: String!
              }
              type Entry {
                  Name: String!
                  RoomId: String!
              }
              input PathInput {
                  PermanentId: String
                  Name: String!
                  RoomId: String
              }
              input ResourceGrantInput {
                CharacterId: String!
                Actions: String
                Roles: String
              }
              input ExternalGrantInput {
                CharacterId: String!
                Resource: String!
                Actions: String
                Roles: String
              }
              type Room {
                  PermanentId: String!
                  Name: String!
                  Description: String
                  ParentId: String
                  Visibility: String
                  Topology: String
                  Exits: [Exit]
                  Entries: [Entry]
                  Grants: [ResourceGrant]
                  Retired: Boolean
              }
              type Message @aws_iam @aws_cognito_user_pools {
                  MessageId: String!
                  CreatedTime: Long!
                  Target: String!
                  Message: String!
                  RoomId: String
                  CharacterId: String
                  FromCharacterId: String
                  ToCharacterId: String
                  Recap: Boolean
                  ExpirationTime: Long
                  Type: String
                  Title: String
              }
              type PlayerSubscription @aws_iam @aws_cognito_user_pools {
                  Type: String!
                  PlayerName: String!
                  PlayerInfo: Player
                  CharacterInfo: Character
                  GrantInfo: ExternalGrant
              }
              type MapRoomEntry {
                  PermanentId: String!
                  X: Int!
                  Y: Int!
                  Locked: Boolean
              }
              type Map @aws_iam @aws_cognito_user_pools {
                  MapId: String!
                  Name: String
                  Rooms: [MapRoomEntry]
              }
              type Settings @aws_iam @aws_cognito_user_pools {
                  ChatPrompt: String
              }
              input MapRoomInput {
                  PermanentId: String!
                  X: Int!
                  Y: Int!
                  Locked: Boolean
              }
              type Backup @aws_iam @aws_cognito_user_pools {
                  PermanentId: String!
                  Name: String!
                  Description: String
                  Status: String
              }
              type ChangedPermanent @aws_iam @aws_cognito_user_pools {
                Neighborhood: Neighborhood
                Room: Room
                Map: Map
                Settings: Settings
                Backup: Backup
                Character: Character
              }
              type Mutation {
                  putPlayer(
                      PlayerName: String,
                      CodeOfConductConsent: Boolean
                    ): PlayerSubscription
                  putCharacter(
                      Name: String!,
                      CharacterId: String,
                      Pronouns: String,
                      FirstImpression: String,
                      Outfit: String,
                      OneCoolThing: String,
                      HomeId: String
                  ): PlayerSubscription
                  externalPutCharacter(
                      Name: String!,
                      CharacterId: String,
                      Pronouns: String,
                      FirstImpression: String,
                      Outfit: String,
                      OneCoolThing: String,
                      HomeId: String
                  ): [ChangedPermanent]
                  @aws_iam @aws_cognito_user_pools
                  addCharacterInPlay(
                      CharacterId: String!
                  ): CharacterInPlay
                  @aws_iam @aws_cognito_user_pools
                  deleteCharacterInPlay(
                      CharacterId: String!
                  ): CharacterInPlay
                  @aws_iam @aws_cognito_user_pools
                  disconnectCharacterInPlay(
                      CharacterId: String!
                  ): CharacterInPlay
                  @aws_iam @aws_cognito_user_pools
                  moveCharacter(
                      CharacterId: String!
                      RoomId: String!
                  ): CharacterInPlay
                  putNeighborhood(
                      CharacterId: String!
                      PermanentId: String
                      Name: String!
                      Description: String
                      ParentId: String
                      Visibility: String
                      Topology: String
                      ContextMapId: String
                      Grants: [ResourceGrantInput]
                      Retired: Boolean
                  ): [ChangedPermanent]
                  putRoom(
                      PermanentId: String
                      Name: String!
                      Description: String
                      ParentId: String
                      Visibility: String
                      Topology: String
                      Exits: [PathInput]
                      Entries: [PathInput]
                      Retired: Boolean
                  ): Room
                  externalUpdateGrant(
                      PlayerName: String!
                      CharacterId: String!
                      Type: String!
                      Grant: ExternalGrantInput!
                  ): PlayerSubscription
                  @aws_iam @aws_cognito_user_pools
                  putRoomMessage(
                      RoomId: String!
                      Message: String!
                      MessageType: String
                      Title: String
                      FromCharacterId: String
                      MessageId: String
                      CreatedTime: Long
                  ): Message
                  @aws_iam @aws_cognito_user_pools
                  putDirectMessage(
                      CharacterId: String!
                      Message: String!
                      FromCharacterId: String!
                      ToCharacterId: String!
                      MessageId: String
                      CreatedTime: Long
                  ): Message
                  @aws_iam @aws_cognito_user_pools
                  putRole(
                      RoleId: String!
                      Name: String!
                      Actions: String!
                  ): Role
                  @aws_iam @aws_cognito_user_pools
                  putMap(
                      MapId: String
                      Name: String!
                      Rooms: [MapRoomInput]
                  ): [ChangedPermanent]
                  @aws_iam @aws_cognito_user_pools
                  putSettings(
                      ChatPrompt: String
                  ): [ChangedPermanent]
                  @aws_iam @aws_cognito_user_pools
                  putBackup(
                      PermanentId: String
                      Name: String
                      Description: String
                      Status: String
                  ): [ChangedPermanent]
                  @aws_iam @aws_cognito_user_pools
                  createBackup(
                      PermanentId: String
                      Name: String
                      Description: String
                  ): [ChangedPermanent]
                  @aws_iam @aws_cognito_user_pools
                  restoreBackup(
                      PermanentId: String
                  ): [ChangedPermanent]
                  @aws_iam @aws_cognito_user_pools
              }
              type Query {
                  getPlayer(PlayerName: String!): Player
                  getCharacter(playerName: String!, name: String!): Character
                  getPlayerCharacters: [Character]
                  getAllCharacters: [Character]
                  getCharactersInPlay: [CharacterInPlay]
                  getNeighborhoodTree: [ChangedPermanent]
                  getNeighborhood(PermanentId: String!): Neighborhood
                  getRoom(PermanentId: String!): Room
                  getRoomRecap(PermanentId: String!): [Message]
                  getRoomByCharacter(CharacterId: String!): Room
                  getRoles: [Role]
                  getMaps: [Map]
                  getSettings: Settings
                  getBackups: [Backup]
              }
              type Subscription {
                  changedPlayer (PlayerName: String): PlayerSubscription
                  @aws_subscribe(mutations: ["putPlayer", "putCharacter", "externalUpdateGrant"])
                  changedCharactersInPlay: CharacterInPlay
                  @aws_subscribe(mutations: ["addCharacterInPlay", "deleteCharacterInPlay", "moveCharacter"])
                  changedPermanents: [ChangedPermanent]
                  @aws_subscribe(mutations: ["putNeighborhood", "putMap", "putSettings", "putBackup", "createBackup", "restoreBackup", "externalPutCharacter"])
                  changedRoom: Room
                  @aws_subscribe(mutations: ["putRoom"])
                  addedMessage (
                    RoomId: String
                    CharacterId: String
                  ): Message
                  @aws_subscribe(mutations: ["putRoomMessage", "putDirectMessage"])
                  changedRole : Role
                  @aws_subscribe(mutations: ["putRole"])
              }
              schema {
                  mutation: Mutation
                  query: Query
                  subscription: Subscription
              }

Outputs:
  UserPoolClient:
      Description: The client ID for the player user pool
      Value:
          Fn::ImportValue:
              !Sub "${PermanentsStack}-UserPoolClient"

  UserPoolId:
      Description: The internal ID for the player user pool
      Value:
          Fn::ImportValue:
              !Sub "${PermanentsStack}-UserPoolId"

  WebSocketURI:
      Description: "The WSS Protocol URI to connect to for realtime control messages"
      Value: !Join [ '', [ 'wss://', !Ref RealTimeWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'RealTimeStage'] ]

  WebSocketApiId:
      Description: "The ID of the API for realtime controll"
      Value: !Ref RealTimeWebSocket

  StorageApiURI:
      Description: "The HTTP Protocol URI to connect to proxy to the S3 storage bucket"
      Value: !Join [ '', [ 'https://', !Ref StorageApi, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/storage'] ]

  StorageApiId:
      Description: "The ID of the API for S3 storage"
      Value: !Ref StorageApi

  AppSyncURL:
      Description: The URL of the AppSync GraphQL endpoint
      Value: !GetAtt AppSyncAPI.GraphQLUrl

  AppSyncID:
      Description: The ApiID of the AppSync GraphQL endpoint
      Value: !GetAtt AppSyncAPI.ApiId

  InitializeLambda:
      Description: The Lambda function to invoke in order to initialize the MessagesDynamoDBTableDataSource
      Value: !Ref InitializeFunction
